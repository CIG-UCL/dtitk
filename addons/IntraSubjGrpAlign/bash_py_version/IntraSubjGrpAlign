#!/bin/bash

#============================================================================
#
#  Program:     This is a plug-in which integrates with both
#               DTI ToolKit (DTI-TK) and python scripts
#  Language:    bash, python
#  Date:        $Date: 2020/10/07 16:10:40 $
#  Version:     $Revision: 0 $
#
#  Copyright (c)
#  Michele Guerreri (michele.guerreri@gmail.com)
#  Gary Hui Zhang (garyhuizhang@gmail.com).
#  All rights reserverd.
#
#============================================================================

#
# IntraSubjGrpAlign

# INPUTS:
# path_to_wrkfold: absolute path to the folder of the subject you wish to
#                  analyse. This folder is referred to as working folder	.
#                  Each time point is assumed to be organized in a separate
#                  sub folder.
#
# dt_tp_list: name of the text file in which each line specifies the
#             relative path from the working folder to each diffusion
#             tensor timepoint (which must be in DTI-TK format).
#             The number of lines in the text file should match the number
#             of time points for that specific subject.
#             The text file should be saved in the folder speficied by
#             "path_to_wrkfold".
#
# OUTPUTS:
# 1. The set of transformations bringing each time point to the target
#    space. The transformations are saved as text files in DTI-TK affine
#    matrix format. The transformations are saved in each time point sub
#    folder and, by default, the name is set equal to the input diffusion
#    tensor, but with ".aff" extension.
#
# 2. Each diffusion tensor time point brought into the target space. These
#    files are saved in the same folders as the transformation matrices,
#    with the suffix "_aff.nii.gz".
#
# 3. Mean of all time point into the target space as well as the main
#    diffusion tensor scalar metrics in that space. These files are saved
#    in an additional subfolder of the working directory named
#    "IntraSubjGrpTemplate".
#



# source PATH setting from ~.bashrc
# required for qsub to work
if [ -e ~/.bashrc ]
then
        . ~/.bashrc
elif [ -e ~/.bash_profile ]
then
        . ~/.bash_profile
fi

# check DTITK_ROOT variable
if [ -z "${DTITK_ROOT}" ]
then
        echo "Environment variable DTITK_ROOT is not defined"
        exit 1
fi

# source dtitk_common.sh
. ${DTITK_ROOT}/scripts/dtitk_common.sh


if [ $# -lt 2 ]
then
        echo "Unbiased single-subject multiple-timepoints alignment."
        echo "Usage: `basename $0` path/to/subj_folder list_of_timepoints"
	echo "path/to/subj_folder is the absolute path to the working folder"
	echo "list_of_timepoints is a textfile within path/to/subj_folder in which are listed te paths to the diffusion tensors from different timepoints."
	echo "Such diffusion tensors must be in DTI-TK format."
        exit 1
fi

##################### INPUTS ########################

# Inputs from the user
wrkfold_path=$1 # absolute path to working folder
tp_list=$2 # text file with relative paths to the DT timepoints

# Other needed inputs
SM_dt="EDS" # similarity metric for dt registrations
SM_scalar="SSD" # similarity metric for scalar registrations
sep="4" #separaiton for rgistration (same for x y z)
ftol=0.001 # tolerance past which the registration stop
n_iter=5 # number of iterations for template hw template creation

# store current directory
orig_folder=$PWD;
# cd to working directory
cd $wrkfold_path
# concatenate wrkfold_path and txt file
dt_tp_list="$wrkfold_path/$tp_list"

pwd
#echo $wrkfold_path
#echo $tp_list
#echo $dt_tp_list
#cat $dt_tp_list


##################### OUTPUTS ########################

# Define target directory
target_folder="IntraSubjGrpTemplate"
# if does not exist create it
if [ ! -d "$target_folder" ]; then
	mkdir "$target_folder"
fi

# Define tmp directory for template initializaiton
init_targSpace_folder="$target_folder/targSpace_init"
# if does not exist create it
if [ ! -d "$init_targSpace_folder" ]; then
	mkdir "$init_targSpace_folder"
fi

# Define tmp directory for template creation
pop_tmp_creation_folder="$target_folder/template_creation"
# if does not exist create it
if [ ! -d "$pop_tmp_creation_folder" ]; then
	mkdir "$pop_tmp_creation_folder"
fi

# The log file
logf="$wrkfold_path/$target_folder/log.txt"
echo "# IntraSubjGrpAlign log file" > "$logf"

# The script is divided in 7 steps listed below.
#
# NOTE: the paths are all relative to the one specified as input of the script
#
# STEP1:
# Register all the timepoints to the timepoint 1 (the first listed in the file, can be any).
# It uses DTI-TK script "rtvCGM"
# Input: text files with list of paths to DT files (one for each TP)
# Output: Transformation matrices. Stored into IntraSubjGrpTemplate/targSpace_init/
#		  create also a file with the list of trnasformations for step2 "IntraSubjGrpTemplate/targSpace_init/rigid_dts_to_tp1.txt"

# define the output
rigid_dts_to_tp1_list="$init_targSpace_folder/rigid_dts_to_tp1.txt"
echo -n "" > $rigid_dts_to_tp1_list
# write in the log file
echo "# STEP1" >> $logf
# loop over the lines of the input file
line=0 # line counter
while IFS="" read -r p || [ -n "$p" ]; do
	line=$(expr $line + 1) # increment
	if [ $line = 1 ]; then
		ref_dt=$p # the reference diffusion tensor is the first in the list "tp1"
	else
		mov_dt=$p # All the others DT are the moving DTs.
		rigid_dt_to_tp1="$init_targSpace_folder/rigid_dt_tp${line}_to_tp1.aff" # output transfomration
		# Run the registration
		rtvCGM -SMOption $SM_dt -template $ref_dt -subject $mov_dt -sep $sep $sep $sep -ftol $ftol -outTrans $rigid_dt_to_tp1 | tee -a $logf
		# Write the output in the file list
		echo $rigid_dt_to_tp1 >> $rigid_dts_to_tp1_list
	fi
done < "$dt_tp_list"


# STEP2:
# Compute the average trasnformation form the transformations at step 1
# It uses a python script
# Input: Transformation matrices (step1). File (?)
# Output: Average tranformaiton and inverse of the average. Stored into IntraSubjGrpTemplate/targSpace_init/
#			avrg_transf.aff
#			avrg_transf_inv.aff

# Define the output basename for the Pyrhon script
avrg_transf_basename="$init_targSpace_folder/avrg"
# Run the script
compute_avrg_transf -f $rigid_dts_to_tp1_list -o $avrg_transf_basename


# STEP3:
# Compute and apply the initial transformations to the halfway space for each timepoint.
# Combine the output from step1 and step2
# It uses "affine3Dtool" and "affineSymTensor3DVolume"
# Input: The transformations from step2
# Output: Concatenated transofrmations and apply to tensors. Both stored in IntraSubjGrpTemplate/targSpace_init/
#		  You also need a list with the .nii.gz files for the next steps (with the full path)
#			rigid_tp[TP#]_to_targ.aff
#			dttp[TP#]_to_targ.nii.gz
#			dttps_to_targ_list.txt

# The output of step2 is
avrg_transf_inv="${avrg_transf_basename}_inv.aff"

# to store the diffusion tensrs trnasf to initial targ space
dtps_to_targ_init_list="$init_targSpace_folder/dttps_to_targ_list.txt"
echo -n "" > $dtps_to_targ_init_list

# loop over the lines of the input file
line=0 # line counter
while IFS="" read -r p || [ -n "$p" ]; do
	line=$(expr $line + 1) # increment
	# name of the transformation from each timepoint to the initial target
	rigid_dttp_to_targ_init="$init_targSpace_folder/rigid_tp${line}_to_targ.aff"
	dttp_to_targ_init="$init_targSpace_folder/dttp${line}_to_targ.nii.gz"
	if [ $line = 1 ]; then
		# in this case the transformation is just the inverse of the average
		cp $avrg_transf_inv $rigid_dttp_to_targ_init
		# also define the target space for the trnasformation as the image itself, to begin
		targ_space=$p
	else
		rigid_dt_to_tp1="$init_targSpace_folder/rigid_dt_tp${line}_to_tp1.aff" # transformation from the timepoint to tp1
		# in all other cases the transformation is the concat TP? >> TP1 + TP1 >> init_targ
		affine3Dtool -in $rigid_dt_to_tp1  -compose $avrg_transf_inv -out $rigid_dttp_to_targ_init | tee -a $logf
		# also define the target space for the trnasformation as the already computed TP1_to_init_targ_space
		targ_space="$init_targSpace_folder/dttp1_to_targ.nii.gz"
	fi
	affineSymTensor3DVolume -in $p -target $targ_space -out $dttp_to_targ_init -trans $rigid_dttp_to_targ_init -interp LEI | tee -a $logf
	echo $dttp_to_targ_init >> $dtps_to_targ_init_list
done < "$dt_tp_list"


# STEP4:
# Compute the initial guess of the target space
# Average the DT output from step3
# It uses "TVMean"
# Input: dttps_to_targ_list.txt
# Output: The initial template, which is stored into IntraSubjGrpTemplate/targSpace_init/
#			initial.nii.gz

initial_guess="$wrkfold_path/$init_targSpace_folder/initialGuess.nii.gz"
# Compute the initial target space guess as the mean of all TPs
TVMean -in  $dtps_to_targ_init_list -out $initial_guess | tee -a $logf


# STEP5:
# Compute the transformations from each timepoint to the target space
# Uses output of step4 and step3 to initialize an iterative template creation.
# It uses only the firs element of the tensor, i.e. xx, to be faster and more robust.
# Thus it uses the DTI-TK "scalar_rigid_population" script.
# Input: initial.nii.gz, the file list with the original DT tensors needs to be copied into the target directory and renamed "orig_dt_abs_path_list.txt"
# Output: Automatically generates the .aff file in each timepoint folder. The template is generated in the folder IntraSubjGrpTemplate/create_template
#			orig_abs_path_list_aff.txt is created within the same folder.


# first I need to creat a text file within the working drectory with absolute path to original DT TPs
orig_dt_abs_path_list="$wrkfold_path/$pop_tmp_creation_folder/orig_dt_abs_path_list.txt"

echo -n "" > $orig_dt_abs_path_list
# loop over the lines of the input file
while IFS="" read -r p || [ -n "$p" ]; do
	echo "$wrkfold_path/$p" >> $orig_dt_abs_path_list # absolute path
done < "$dt_tp_list"

# go to directory
cd $pop_tmp_creation_folder
# run the script for pop template creation
scalar_rigid_population $initial_guess $orig_dt_abs_path_list $SM_scalar $n_iter | tee -a $logf
# go back to subj directory
cd $wrkfold_path

# STEP6:
# Bring DTs in the template space
# Once that the intra-subj-group-template is defined, each timepoint DT needs to be warped there (in the privious step the transformation is applyed only on the first element of the tensor).
# It uses "affineSymTensor3DVolume"
# Input: Uses the .aff files generated in the privious step. Uses the original DT files. Also uses "orig_abs_path_list_aff.txt" text file automatically generated in step 5
# Output: The warped DT volumes are overwritten in each timepoint folder as "orig_name_aff.nii.gz"

# One of the outputs of step5
dt_aff_list=`echo $orig_dt_abs_path_list | sed -e 's/.txt/_aff.txt/'`
aff_list="$wrkfold_path/$pop_tmp_creation_folder/rigid.txt"

# loop over the lines of the affine list file
line=0 # line counter
while IFS="" read -r p || [ -n "$p" ]; do
	line=$(expr $line + 1) # increment
	input_vol=`head -n ${line} $dt_tp_list | tail -1`
	output_vol=`head -n ${line} $dt_aff_list | tail -1`
	affineSymTensor3DVolume -in $input_vol -target $initial_guess -out $output_vol -trans $p -interp LEI
done < "$aff_list"

# STEP7:
# Compute the final version of the DT halfway space template. Compute also the MD and FA form it
# It uses "TVMean" and "TVtool"
# Input: "orig_abs_path_list_aff.txt"
# Output: dt_template.nii.gz, dt_fa_template.nii.gz, dt_md_template.nii.gz in IntraSubjGrpTemplate folder.

targ_dt_template="$target_folder/dt_template.nii.gz"
targ_fa_template="$target_folder/dt_fa_template.nii.gz"
targ_md_template="$target_folder/dt_md_template.nii.gz"

TVMean -in  $dt_aff_list -out $targ_dt_template
TVtool -in $targ_dt_template -fa -out $targ_fa_template
TVtool -in $targ_dt_template -tr -out $targ_md_template










